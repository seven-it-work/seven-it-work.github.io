{"name":{"zh":"易佳骆","en":"Jaro Yi"},"job":{"zh":"全栈开发工程师","en":"Full Stack Developer"},"skills":{"skill":{"zh":"专业技能","en":"Professional Skills"},"list":[{"title":{"zh":"编码语言","en":"Programming Languages"},"content":[{"zh":"Java基础扎实、掌握多线程、集合、并发编程、设计模式、常用数据结构和算法。","en":"Have a strong foundation in Java, proficient in multithreading, collections, concurrency, design patterns, common data structures, and algorithms."},{"zh":"熟悉TypeScript、JavaScript能够编写核心页面以及交互逻辑。","en":"Familiar with TypeScript and JavaScript, capable of writing core page logic and interaction logic."},{"zh":"深入理解java线程池原理。","en":"Deep understanding of Java thread pool principles."},{"zh":"了解JVM内存模型及作用、分配策略、垃圾回收原理、参数配置、性能调优。","en":"Understanding JVM memory model and its functions, allocation strategies, garbage collection principles, parameter configuration, and performance tuning."},{"zh":"熟练使用Python语言，精通网络爬虫开发与维护，具备利用开源模型进行部署的能力。","en":"Proficient in Python programming, expert in web scraping development and maintenance, with the ability to deploy open-source models."},{"zh":"了解lua语言，能编写lua脚本。","en":"Knowledgeable in Lua programming language, with the ability to write Lua scripts."}]},{"title":{"zh":"开发框架","en":"Framework"},"content":[{"zh":"深入理解Spring、Mybatis等开源框架设计原理。","en":"Deep understanding of the design principles of open-source frameworks such as Spring and MyBatis."},{"zh":"熟悉vue、React、Angular等前端主流开发框架","en":"Familiarity with mainstream front-end development frameworks like Vue, React, and Angular."},{"zh":"熟练掌握Redis数据结构及底层实现、集群高可用架构搭建、分布式锁实现原理、缓存一致性问题解决。","en":"Proficient in Redis data structures and underlying implementation, capable of setting up high-availability cluster architectures, understanding the principles of distributed locks, and solving cache consistency issues."},{"zh":"熟练掌握Mysql、PostgreSQL等数据库，能够分析并优化慢SQL语句","en":"Proficient in MySQL, PostgreSQL, and other databases, with the ability to analyze and optimize slow SQL statements."},{"zh":"了解Django，并能使用python开发。","en":"Understanding of Django and able to develop using Python."},{"zh":"了解stable diffusion，能够搭建sd环境，并能训练模型","en":"Familiar with stable diffusion, capable of setting up the SD environment, and training models."}]},{"title":{"zh":"运维能力","en":"DevOps Skills"},"content":[{"zh":"掌握云原生容器化技术Docker和Kubernetes；基于rancher搭建一站式云平台；GitLab+Jenkins实现持续集成/持续部署。有相关公有云/私有云经验。","en":"Proficiency in cloud-native containerization technologies such as Docker and Kubernetes; ability to build an all-in-one cloud platform using Rancher; implementation of continuous integration (CI) and continuous deployment (CD) with GitLab and Jenkins. Experience with public and private clouds."},{"zh":"掌握SkyWalking实现服务链路追踪系统；ELK+FileBeat构建日志收集系统；Prometheus+Grafana搭建自动化监控系统；掌握DolphinScheduler环境搭建，调度任务创建和管理。","en":"Mastery of service tracing systems using SkyWalking; building log collection systems with ELK (Elasticsearch, Logstash, Kibana) and FileBeat; setting up automated monitoring systems with Prometheus and Grafana; proficiency in setting up and managing tasks with DolphinScheduler."},{"zh":"熟悉常用Linux命令，以及分析java堆栈命令","en":"Familiarity with common Linux commands and tools for analyzing Java stack traces."}]},{"title":{"zh":"测试能力","en":"Testing Skills"},"content":[{"zh":"熟练使用测试工具jmeter、掌握单元测试编写、掌握Selenium自动测试框架","en":"Proficient in using testing tools like JMeter, skilled in writing unit tests, and proficient in using the Selenium automated testing framework."}]}]},"experience":{"title":{"zh":"工作经历","en":"Work Experience"},"list":[{"titleHv":{"zh":"华为科技有限公司","en":"Huawei Technologies Co., Ltd."},"title":{"zh":"外企德科人力资源服务有限公司","en":"FESCO Adecco"},"time":{"zh":"2021.09 - 至今","en":"2021.09 - Now"},"content":[{"zh":"使用Angular+SpringBoot开发和维护缺陷管理系统。","en":"Developed and maintained a defect management system using Angular + Spring Boot."},{"zh":"使用vue+Jalor框架开发以及维护原始需求系统","en":"Developed and maintained the original requirements system using Vue + Jalor framework."},{"zh":"支撑生产问题定位与恢复，慢sql排查以及优化。编写docker的cpu飙升、数据库cpu飙升、内存溢出、过载接口访问、数据库锁阻塞等定位手册以及应急预案","en":"Supported production issue identification and recovery, investigated and optimized slow SQL queries. Documented troubleshooting guides and emergency response plans for Docker CPU spikes, database CPU spikes, memory overflows, overloaded API access, and database lock blockages."},{"zh":"构建系统韧性能力，构建服务异地容灾双活、数据库主备倒换等容灾能力","en":"Built system resilience capabilities, including service geo-redundancy and database failover capabilities."},{"zh":"支撑系统安全工作，管理秘钥以及进行轮转。排查并修复：xss注入、sql注入、CSRF注入等安全漏洞","en":"Supported system security efforts, managed keys and performed key rotations. Investigated and fixed security vulnerabilities such as XSS injection, SQL injection, and CSRF injection."}]},{"titleHv":{"zh":"北京国双科技有限公司","en":"Beijing Gridsum Technology Co., Ltd."},"title":{"zh":"北京国双千里科技有限公司","en":"Beijing Gridsum Technology Co., Ltd."},"time":{"zh":"2019.12 - 2021.09","en":"2019.12 - 2021.09"},"content":[{"zh":"通过vue+springBoot+pg+neo4j开发知识图谱平台，维护知识图谱作业平台。","en":"Developed a knowledge graph platform via Vue + SpringBoot + PostgreSQL + Neo4j and maintained the knowledge graph operation platform."},{"zh":"使用Rancher+k8s搭建云原生环境，使用Prometheus+Grafana搭建自动化监控系统，使用SkyWalking实现服务链路追踪系统。构建云原生环境底座","en":"Set up a cloud-native environment using Rancher + Kubernetes, established an automated monitoring system with Prometheus + Grafana, and implemented service tracing with SkyWalking to construct the foundation of a cloud-native environment."},{"zh":"设计与开发灵活的权限控制系统，通过可视化配置方式配置用户角色权限，精细到按钮菜单级","en":"Designed and developed a flexible permission control system that allows configuring user role permissions through visual configuration, precise to the button and menu level."},{"zh":"熟练掌握开源组件dolphinScheduler并构建多个工作流，包括数据清洗、数据处理等工作","en":"Proficiently mastered the open-source component DolphinScheduler and constructed multiple workflows including data cleansing and data processing tasks."}]}]},"projects":{"title":{"zh":"项目经验","en":"Project Experience"},"list":[{"title":{"zh":"原始需求系统","en":""},"subtitle":{"zh":"全栈开发工程师 2022.05 - ⾄今","en":""},"projectBackground":{"zh":"项⽬背景：","en":"Project Description"},"projectBackgroundDesc":{"zh":"在面对日益增长的数据量和用户需求的情况下，原有的需求管理系统面临着巨大的挑战，包括但不限于数据存储瓶颈、系统性能下降以及安全性不足等问题。为了确保系统的稳定运行，同时提升用户体验，本项目旨在对该系统进行全面的技术改造和优化。","en":""},"mainWork":{"zh":"主要工作内容：","en":"Primary Duties"},"mainWorkList":[{"zh":"通过对PostgreSQL数据库进行分表分库设计，成功解决了百万级数据的存储问题，保障了系统的高可用性和高性能。","en":"By implementing sharding design on the PostgreSQL database, successfully addressed storage issues for datasets in the millions, ensuring high availability and performance of the system."},{"zh":"针对系统导出功能进行了线程池优化，显著缩短了大量数据导出所需的时间，有效避免了内存溢出现象，从而提升了用户体验。","en":"Optimized the thread pool for the system's export functionality, significantly reducing the time required to export large volumes of data, effectively preventing memory overflow issues, and enhancing user experience."},{"zh":"设立了一套快速响应机制，能够在3分钟内对生产环境中的故障做出反应，并且在10分钟内恢复系统服务，同时能够迅速定位问题根源，制定并实施应急方案。","en":"Established a rapid response mechanism capable of reacting to production environment failures within 3 minutes and restoring system services within 10 minutes, while quickly identifying root causes and implementing emergency solutions."},{"zh":"为增强系统的抗压能力，引入了JMeter进行压力测试，通过测试结果合理设置了接口的限流策略，有效抵御了过载及恶意流量攻击。","en":"To enhance the system's resilience, introduced JMeter for load testing, and based on the test results, set reasonable rate-limiting strategies for APIs, effectively defending against overload and malicious traffic attacks."},{"zh":"加强了系统的安全管理，实施了秘钥的定期轮换策略，并修复了多种安全漏洞，如XSS注入、SQL注入以及水平越权等问题，同时保持对第三方组件的安全更新。","en":"Strengthened system security by implementing a regular key rotation policy, fixing multiple security vulnerabilities such as XSS injection, SQL injection, and horizontal privilege escalation, while maintaining security updates for third-party components."},{"zh":"通过构建异地容灾双活环境，提高了系统的灾难恢复能力，确保在任何单一数据中心发生故障时，服务仍可正常运行。","en":"Through the construction of a geographically dispersed disaster recovery dual-active environment, improved the system's disaster recovery capabilities, ensuring service continuity even when a single data center fails."}],"techStack":{"zh":"技术栈：","en":"Tech Stack"},"techStackList":[{"zh":"前端框架：vue","en":"Frontend Framework: Vue"},{"zh":"数据库：PostgreSQL","en":"Database: PostgreSQL"},{"zh":"缓存：Redis","en":"Caching: Redis"},{"zh":"分布式锁：redis","en":"Distributed Locking: Redis"},{"zh":"权限管理：AOP切面编程","en":"Authorization Management: Aspect-Oriented Programming (AOP)"},{"zh":"文件导入导出：EasyPoi","en":"File Import/Export: EasyPoi"},{"zh":"消息队列：Kafka","en":"Message Queue: Kafka"},{"zh":"微服务架构：Spring Cloud Alibaba","en":"Microservices Architecture: Spring Cloud Alibaba"},{"zh":"认证授权：soaToken","en":"Authentication and Authorization: soaToken"}],"projectAchievements":{"zh":"项目成果：","en":"Project Achievements"},"projectAchievementsList":[{"zh":"开发并维护日活3万+的需求管理系统，通过对pg数据库分表分库来承载百万级庞大数据。","en":"Developed and maintained a requirements management system with over 30,000 daily active users, capable of handling massive datasets through sharding and partitioning of the PostgreSQL database."},{"zh":"优化系统线程池，解决一次5w+的数据量导出处理时长问题，并避免了内存溢出。提升系统导出性能，极大的改善用户体验。","en":"Optimized the system's thread pool to reduce the processing time for exporting batches of over 50,000 records, avoiding memory overflow and significantly improving the system's export performance and user experience."},{"zh":"维护生产环境，在3分钟内响应生产故障，10分钟内进行生产系统恢复，并在恢复后进行快速定位分析问题所在。并总结了cpu飙升、内存溢出、数据库锁阻塞等应急预案。","en":"Maintained the production environment with a rapid response mechanism capable of addressing production issues within 3 minutes and restoring services within 10 minutes. Conducted post-recovery analysis to quickly identify root causes and established emergency response plans for scenarios such as CPU spikes, memory overflow, and database lock contention."},{"zh":"构建环境接口过载能力，并对系统300+个接口进行jmeter压力测试，通过压力测试确定限流阈值。当过载恶意流量方式时，极大的保障了系统的稳定性，防止恶意流量攻击服务。","en":"Enhanced the system's overload tolerance by conducting load testing on over 300 interfaces using JMeter, determining rate-limiting thresholds. This ensured stability under high loads and protected against malicious traffic attacks."},{"zh":"支撑系统安全工作，有效的管理30+秘钥，秘钥全都有计划轮转，防止秘钥泄露。排查并修复系统中：xss注入50+、sql注入5+、水平越权问题等安全问题，并实时的关注业界组件更新组件版本。","en":"Supported system security by managing over 30 keys with scheduled rotations to prevent key exposure. Identified and fixed over 50 XSS injection vulnerabilities, more than 5 SQL injection issues, and resolved horizontal privilege escalation problems. Continuously monitored industry component updates to keep components up-to-date."},{"zh":"构建系统韧性能力，构建异地容灾双活环境，保证区域故障后服务仍然可用。","en":"Built system resilience by constructing a geographically dispersed disaster recovery environment, ensuring service availability even in the event of regional failures."}]},{"title":{"zh":"缺陷管理系统","en":""},"subtitle":{"zh":"全栈开发工程师 2021.09 - 2022.05","en":""},"projectBackground":{"zh":"项⽬背景：","en":"Project Description"},"projectBackgroundDesc":{"zh":"随着软件开发项目的复杂度不断提高，缺陷管理成为软件生命周期中不可或缺的一环。本项目旨在建立一个全新的缺陷管理系统，以提高缺陷处理效率，简化管理流程，并减少后续维护的工作量。","en":"As the complexity of software development projects continues to increase, defect management has become an indispensable part of the software lifecycle. This project aims to establish a new defect management system to improve defect handling efficiency, simplify management processes, and reduce subsequent maintenance workload."},"mainWork":{"zh":"主要工作内容：","en":"Primary Duties"},"mainWorkList":[{"zh":"前端部分使用Angular框架结合DevUi组件库和TypeScript语言进行开发，创建了一个用户友好的界面，使缺陷报告、追踪和管理变得更加直观和便捷。","en":"The frontend was developed using the Angular framework combined with the DevUi component library and TypeScript language, creating a user-friendly interface that makes defect reporting, tracking, and management more intuitive and convenient."},{"zh":"后端采用Spring Boot框架进行开发，利用状态模式和责任链模式等设计模式来组织代码，实现了对缺陷状态流转的灵活控制，同时也简化了业务逻辑的实现，降低了维护成本。","en":"The backend was developed using the Spring Boot framework, leveraging design patterns such as the State pattern and Chain of Responsibility pattern to organize the code. This approach enabled flexible control over defect status transitions, simplified business logic implementation, and reduced maintenance costs."},{"zh":"通过前后端分离的设计理念，使得前端负责UI呈现和交互逻辑，而后端专注于业务逻辑处理和数据管理，这种架构不仅提高了开发效率，也便于团队协作和后期的功能迭代。","en":"By adopting a separation of concerns architecture, where the frontend handles UI presentation and interaction logic while the backend focuses on business logic processing and data management, this design not only improved development efficiency but also facilitated team collaboration and future feature iterations."},{"zh":"项目中还引入了持续集成/持续部署（CI/CD）的实践，确保了代码质量，并加快了新功能上线的速度","en":"The project also incorporated Continuous Integration/Continuous Deployment (CI/CD) practices, ensuring code quality and accelerating the release of new features."}],"techStack":{"zh":"技术栈：","en":"Tech Stack"},"techStackList":[{"zh":"前端：Angular + DevUi + TypeScript","en":"Frontend: Angular + DevUi + TypeScript"},{"zh":"后端：Spring Boot","en":"Backend: Spring Boot"},{"zh":"设计模式：状态模式、责任链模式","en":"Design Patterns: State Pattern, Chain of Responsibility Pattern"}],"projectAchievements":{"zh":"项目成果：","en":"Project Achievements"},"projectAchievementsList":[{"zh":"建立了一个高效、易用的缺陷管理系统，大大提升了开发团队的缺陷管理效率，减少了重复劳动。","en":"Established an efficient and user-friendly defect management system, significantly enhancing the defect management efficiency of the development team and reducing repetitive labor."},{"zh":"通过采用前后端分离架构，实现了界面与业务逻辑的解耦，提高了系统的可维护性和可扩展性。","en":"By adopting a front-end and back-end separation architecture, decoupling the user interface from the business logic, the system's maintainability and scalability have been improved."},{"zh":"应用设计模式改进了代码结构，降低了后续开发的成本，使得系统的升级和维护变得更加简单快捷。","en":"The application of design patterns has improved the code structure, reducing the cost of subsequent development and making system upgrades and maintenance simpler and faster."}]},{"title":{"zh":"国双知识图谱智能","en":""},"subtitle":{"zh":"全栈开发工程师 2019.12 - 2021.09(包含实习经历)","en":""},"projectBackground":{"zh":"项⽬背景：","en":"Project Description"},"projectBackgroundDesc":{"zh":"一款整合了知识存储、数据分析、可视化展示和智能应用等能力的一站式知识图谱模块，对结构化和非结构化数据进行融合和管理，消除分散的数据孤岛，形成统一的多维度知识图谱，为业务应用提供基础的图谱查询能力和复杂的图谱分析计算能力，实现对知识信息的快速流动和共享应用。","en":"A comprehensive knowledge graph module that integrates knowledge storage, data analysis, visualization, and intelligent applications. It merges and manages both structured and unstructured data, eliminating isolated data silos and forming a unified multi-dimensional knowledge graph. This module provides foundational graph query capabilities and complex "},"mainWork":{"zh":"主要工作内容：","en":"Primary Duties"},"mainWorkList":[{"zh":"DolphinScheduler任务调度系统的搭建与集成：负责搭建并优化DolphinScheduler环境，以实现对数据处理任务的自动化调度。确保任务能够按照预定规则准确执行，提高数据处理效率和准确性。","en":"DolphinScheduler Task Scheduling System Setup and Integration: Responsible for setting up and optimizing the DolphinScheduler environment to automate the scheduling of data processing tasks. Ensured that tasks execute accurately according to predefined rules, improving data processing efficiency and accuracy."},{"zh":"Rancher管理平台的部署与运维：构建基于Rancher的管理平台，用于Kubernetes集群的集中式管理。通过Rancher简化了K8s集群的部署、监控及日常维护工作，提升了云原生环境下的应用交付速度与稳定性。","en":"Rancher Management Platform Deployment and Operations: Built a management platform based on Rancher for centralized management of Kubernetes clusters. Simplified the deployment, monitoring, and daily maintenance of K8s clusters through Rancher, enhancing the speed and stability of application delivery in cloud-native environments."},{"zh":"可视化权限配置管理系统的开发：设计并实现了一个可视化的权限配置管理系统，解决了平台中用户权限控制的问题。该系统支持细粒度的权限分配，可以精确到按钮和菜单级别，增强了系统的安全性和易用性。","en":"Development of a Visual Permission Configuration Management System: Designed and implemented a visual permission configuration management system to address user permission control within the platform. The system supports fine-grained permission allocation, precise to the button and menu level, enhancing the system's security and usability."},{"zh":"基于Neo4j的图数据库应用开发：利用Neo4j图数据库进行业务逻辑的开发，包括编写复杂的图查询语句和图编辑操作。通过图数据库的强大功能，提高了数据关联分析的性能和灵活性，支持了更为复杂和精细的业务需求。","en":"Development of Graph Database Applications Based on Neo4j: Developed business logic using Neo4j graph database, including writing complex graph query statements and graph editing operations. Leveraged the powerful capabilities of the graph database to improve the performance and flexibility of data association analysis, supporting more complex and detailed business requirements."}],"techStack":{"zh":"技术栈：","en":"Tech Stack"},"techStackList":[{"zh":"前端：Vue2框架","en":"Frontend: Vue 2 Framework"},{"zh":"后端：Spring Cloud微服务架构","en":"Backend: Spring Cloud Microservices Architecture"},{"zh":"数据库：PostgreSQL，Neo4j（图数据库）","en":"Databases: PostgreSQL, Neo4j (Graph Database)"}],"projectAchievements":{"zh":"项目成果：","en":"Project Achievements"},"projectAchievementsList":[{"zh":"该项目成功地为公司提供了稳定可靠的知识图谱管理平台，不仅提升了内部工作效率，还为客户提供了更加精准和高效的服务。通过引入先进的技术和管理工具，项目团队显著增强了系统的可用性、可扩展性和安全性。","en":"This project successfully provided the company with a stable and reliable knowledge graph management platform, not only enhancing internal work efficiency but also offering customers more accurate and efficient services. By introducing advanced technologies and management tools, the project team significantly enhanced the system's availability, scalability, and security."}]}]}}